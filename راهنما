---

بسیار خب، اجازه بدید این خطوط Crontab رو با جزئیات بیشتری توضیح بدم تا کاملاً متوجه بشید چطور کار می‌کنن و چطور می‌تونید اونها رو برای نیازهای خودتون سفارشی کنید.

---

### Crontab چیه؟

**Crontab** (Cron Table) یک سرویس زمان‌بندی در سیستم‌عامل‌های مبتنی بر یونیکس (مثل لینوکس) هست. این سرویس به شما اجازه می‌ده که دستورات یا اسکریپت‌ها رو در زمان‌های مشخص و به صورت اتوماتیک اجرا کنید. مثل این می‌مونه که یک یادآور یا زنگ هشدار برای سرور خودتون تنظیم می‌کنید، با این تفاوت که به جای یادآوری، یک کار خاص رو انجام می‌ده.

---

### ساختار یک خط Crontab

هر خط در Crontab (به جز خطوط کامنت که با `#` شروع می‌شن) از ۶ بخش تشکیل شده:

`دقیقه ساعت روز_ماه ماه روز_هفته دستور`

* **دقیقه (Minute):** 0 تا 59
* **ساعت (Hour):** 0 تا 23 (فرمت 24 ساعته)
* **روز ماه (Day of Month):** 1 تا 31
* **ماه (Month):** 1 تا 12 (یا Jan تا Dec)
* **روز هفته (Day of Week):** 0 تا 7 (0 یا 7 برای یکشنبه، 1 برای دوشنبه و...)
* **دستور (Command):** دستوری که می‌خواید اجرا بشه.

**کاراکترهای خاص:**

* `*`: به معنی "همه" است. مثلاً `*` در ستون "ساعت" یعنی هر ساعت.
* `,`: برای لیست کردن مقادیر. مثلاً `1,15` در ستون "روز ماه" یعنی روزهای اول و پانزدهم ماه.
* `-`: برای تعیین یک بازه. مثلاً `9-17` در ستون "ساعت" یعنی از ساعت 9 صبح تا 5 بعدازظهر.
* `/`: برای تعیین گام. مثلاً `*/5` در ستون "دقیقه" یعنی هر 5 دقیقه.

---

### توضیح خطوط Crontab شما

حالا بیایید خطوطی که شما ارائه دادید رو بررسی کنیم:

```cron
# Crontab entry for daily database and media backups
# Backups will run every day at 2:00 AM (0 2 * * *)
# --clean: will remove old backups based on DBBACKUP_CLEANUP_KEEP_DAYS
# --compress: will compress the backup file
# --encrypt: will encrypt the backup file (requires GPG setup)
# --noinput: prevents interactive prompts

# بک‌آپ روزانه دیتابیس (Schema + Data)
0 2 * * * /path/to/your/venv/bin/python /path/to/your/project/manage.py dbbackup --clean --compress --encrypt --noinput >> /var/log/dbbackup_daily.log 2>&1

# بک‌آپ روزانه فایل‌های مدیا
30 2 * * * /path/to/your/venv/bin/python /path/to/your/project/manage.py mediabackup --clean --compress --encrypt --noinput >> /var/log/mediabackup_daily.log 2>&1

# برای تست، می‌توانید یک زمان بک‌آپ در آینده نزدیک تعیین کنید (مثلاً هر 5 دقیقه):
# */5 * * * * /path/to/your/venv/bin/python /path/to/your/project/manage.py dbbackup --clean --compress --encrypt --noinput >> /var/log/dbbackup_test.log 2>&1
```

1.  **خطوط کامنت (`#`):**
    * این خطوط با `#` شروع می‌شن و Crontab اونها رو نادیده می‌گیره. اونها فقط برای توضیح و راهنمایی هستن.

2.  **خط بک‌آپ دیتابیس:**
    `0 2 * * * /path/to/your/venv/bin/python /path/to/your/project/manage.py dbbackup --clean --compress --encrypt --noinput >> /var/log/dbbackup_daily.log 2>&1`

    * **`0 2 * * *`**:
        * `0`: در دقیقه 0 (یعنی رأس ساعت).
        * `2`: در ساعت 2 بامداد.
        * `*`: هر روز ماه.
        * `*`: هر ماه.
        * `*`: هر روز هفته.
        * **نتیجه:** این دستور **هر روز در ساعت 2:00 بامداد** اجرا می‌شه.

    * **`/path/to/your/venv/bin/python`**:
        * این **مسیر کامل به مفسر پایتون** شماست که داخل محیط مجازی (virtual environment) پروژه‌تون قرار داره. باید این مسیر رو با مسیر واقعی خودتون جایگزین کنید. مثلاً: `/home/user/myproject/venv/bin/python`.
        * **چرا مهمه؟** چون تضمین می‌کنه که دستورات با پایتون و پکیج‌های نصب شده در محیط مجازی پروژه‌تون اجرا می‌شن و نه با پایتون سراسری سیستم.

    * **`/path/to/your/project/manage.py`**:
        * این **مسیر کامل به فایل `manage.py`** پروژه جنگو شماست. باید این رو هم با مسیر واقعی پروژه‌تون جایگزین کنید. مثلاً: `/home/user/myproject/manage.py`.

    * **`dbbackup`**:
        * این **دستور مدیریت (management command)** پکیج `django-db-backup` هست که وظیفه بک‌آپ گرفتن از دیتابیس رو داره.

    * **`--clean`**:
        * این یک **فِلَگ (flag)** هست که به `dbbackup` می‌گه بک‌آپ‌های قدیمی رو پاک کنه. چه بک‌آپ‌هایی پاک بشن؟ اونهایی که از تعداد روزهای مشخص شده در `settings.py` (یعنی `DBBACKUP_CLEANUP_KEEP_DAYS`) قدیمی‌تر هستن. مثلاً اگر `DBBACKUP_CLEANUP_KEEP_DAYS = 7` باشه، بک‌آپ‌های قدیمی‌تر از ۷ روز حذف می‌شن.

    * **`--compress`**:
        * بک‌آپ گرفته شده رو **فشرده** می‌کنه (معمولاً با فرمت `.gz`). این کار حجم فایل بک‌آپ رو به شدت کم می‌کنه.

    * **`--encrypt`**:
        * بک‌آپ رو **رمزگذاری** می‌کنه. این قابلیت به **GPG** نیاز داره (که باید روی سرور نصب باشه و کلید GPG رو در `settings.py` تنظیم کرده باشید). استفاده از این گزینه برای داده‌های حساس بسیار مهمه.

    * **`--noinput`**:
        * این فِلَگ جلوی هرگونه **سوال تعاملی** که دستور ممکنه بپرسه رو می‌گیره. چون Crontab در محیطی بدون ورودی کاربر اجرا می‌شه، استفاده از این فِلَگ ضروریه.

    * **`>> /var/log/dbbackup_daily.log 2>&1`**:
        * این بخش خروجی دستور رو به یک فایل لاگ می‌فرسته:
            * `>>`: خروجی استاندارد (stdout) رو به فایلی که مشخص شده اضافه می‌کنه (append). اگر فایل وجود نداشته باشه، ایجادش می‌کنه.
            * `/var/log/dbbackup_daily.log`: **مسیر فایل لاگ** شماست. بهتره این فایل در یک مکان امن باشه که دسترسی بهش محدود باشه و به صورت دوره‌ای پاکسازی بشه تا فضای دیسک رو پر نکنه.
            * `2>&1`: خروجی خطا (stderr) رو هم به همون فایلی که خروجی استاندارد رفته (یعنی `/var/log/dbbackup_daily.log`) هدایت می‌کنه. این کار باعث می‌شه هم پیام‌های موفقیت و هم خطاها رو در یک فایل لاگ داشته باشید.

3.  **خط بک‌آپ فایل‌های مدیا:**
    `30 2 * * * /path/to/your/venv/bin/python /path/to/your/project/manage.py mediabackup --clean --compress --encrypt --noinput >> /var/log/mediabackup_daily.log 2>&1`

    * **`30 2 * * *`**: این یعنی **هر روز در ساعت 2:30 بامداد**. نیم ساعت بعد از بک‌آپ دیتابیس.
    * **`mediabackup`**: این دستور `django-db-backup` برای بک‌آپ گرفتن از فایل‌های رسانه‌ای (تصاویر، ویدئوها و...) که در `MEDIA_ROOT` جنگو ذخیره شدن.
    * بقیه فِلَگ‌ها (`--clean`, `--compress`, `--encrypt`, `--noinput`) و هدایت خروجی (`>>`) مشابه بک‌آپ دیتابیس هستن.

4.  **خط تست (کامنت شده):**
    `# */5 * * * * /path/to/your/venv/bin/python /path/to/your/project/manage.py dbbackup --clean --compress --encrypt --noinput >> /var/log/dbbackup_test.log 2>&1`

    * **`*/5 * * * *`**:
        * `*/5`: هر 5 دقیقه (در ستون "دقیقه").
        * بقیه `*`: هر ساعت، هر روز، هر ماه، هر روز هفته.
        * **نتیجه:** این دستور (اگر `#` رو از اولش بردارید) **هر 5 دقیقه یک بار** اجرا می‌شه. این برای **تست کردن** تنظیمات Crontab و اطمینان از اینکه بک‌آپ‌ها به درستی اجرا می‌شن، بسیار مفیده. یادتون باشه بعد از تست، این خط رو دوباره کامنت کنید یا حذف کنید تا سرور رو با بک‌آپ‌های بی‌شمار پر نکنید!

---

### مراحل عملی برای فعال کردن Crontab:

1.  **ورود به SSH سرور:** با یوزر مربوط به پروژه خودتون (نه `root`، مگر اینکه کاملاً مطمئن باشید چه می‌کنید) وارد سرور بشید.
2.  **پیدا کردن مسیرها:**
    * مسیر محیط مجازی پایتون: اگر `venv` در پوشه پروژه‌تونه، معمولاً `/path/to/your/project/venv/bin/python` هست.
    * مسیر `manage.py`: معمولاً `/path/to/your/project/manage.py` هست.
3.  **ویرایش Crontab:**
    ```bash
    crontab -e
    ```
    این دستور فایل Crontab کاربر فعلی رو با یک ویرایشگر (معمولاً `vi` یا `nano`) باز می‌کنه.
4.  **اضافه کردن خطوط:** خطوط بالا رو (با جایگزینی مسیرهای واقعی و بدون `#` برای خطوط فعال) به انتهای فایل اضافه کنید.
5.  **ذخیره و خروج:**
    * در `nano`: Ctrl+X, Y, Enter
    * در `vi`: Esc, `:wq`, Enter
6.  **بررسی لاگ‌ها:**
    * بعد از اجرای اولین بک‌آپ (صبر کنید تا ساعت 2 بامداد یا از خط تست استفاده کنید)، فایل‌های لاگ رو بررسی کنید تا مطمئن بشید خطایی وجود نداره:
        ```bash
        tail -f /var/log/dbbackup_daily.log
        tail -f /var/log/mediabackup_daily.log
        ```
    * همچنین، به پوشه بک‌آپ‌ها که در `settings.py` تنظیم کردید (`DBBACKUP_STORAGE_OPTIONS['location']`) سر بزنید تا ببینید فایل‌ها ایجاد شدن یا نه.

با این توضیحات، شما باید بتونید به راحتی سیستم بک‌آپ خودکار و قوی رو در جنگو پیاده‌سازی و مدیریت کنید. این روش استاندارد و توصیه شده برای بک‌آپ‌های دوره‌ای در محیط پروداکشن هست.