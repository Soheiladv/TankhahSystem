Index: tankhah/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import logging\r\nimport os\r\nfrom decimal import Decimal\r\nfrom django import forms\r\nfrom django.core.exceptions import ValidationError\r\nfrom django.utils.translation import gettext_lazy as _\r\nfrom budgets.budget_calculations import get_subproject_remaining_budget, get_project_remaining_budget\r\nfrom .utils import restrict_to_user_organization\r\nimport jdatetime\r\nfrom django.utils import timezone\r\nfrom Tanbakhsystem.utils import convert_to_farsi_numbers, to_english_digits\r\nfrom Tanbakhsystem.base import JalaliDateForm\r\nfrom tankhah.models import Factor, FactorItem, Tankhah  # وارد کردن مدل\u200Cها\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass FactorItemApprovalForm(forms.Form):\r\n    item_id = forms.IntegerField(widget=forms.HiddenInput)\r\n    action = forms.ChoiceField(\r\n        choices=[\r\n            ('PENDING', _('در انتظار')),\r\n            ('APPROVE', _('تأیید')),\r\n            ('REJECT', _('رد')),\r\n        ],\r\n        widget=forms.Select(attrs={'class': 'form-control form-select', 'style': 'max-width: 200px;'}),\r\n        label=_(\"اقدام\"),\r\n        required=False,\r\n        initial='PENDING'\r\n    )\r\n    comment = forms.CharField(\r\n        widget=forms.Textarea(attrs={\r\n            'class': 'form-control',\r\n            'rows': 2,\r\n            'placeholder': _('توضیحات خود را اینجا وارد کنید...'),\r\n            'style': 'max-width: 500px;'\r\n        }),\r\n        required=False,\r\n        label=_(\"توضیحات\")\r\n    )\r\n    class Meta:\r\n        model = FactorItem\r\n        # Fields to include in the form (that the user interacts with OR needed for processing)\r\n        # We don't include 'status' directly if we use 'action' field\r\n        fields = ['action', 'comment']\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        # Set initial value for 'action' based on the instance's current status\r\n        if self.instance and self.instance.pk:\r\n             # Map DB status to form action choices\r\n             # Adjust this mapping if your ACTION_CHOICES differ from STATUS_CHOICES\r\n            current_status_upper = str(self.instance.status).upper()\r\n            # Find the matching choice value\r\n            matching_choice = current_status_upper if current_status_upper in dict(self.ACTION_CHOICES) else 'PENDING' # Default to PENDING if no match\r\n            self.fields['action'].initial = matching_choice\r\n            # Alternatively, keep initial blank and let JS set dropdown text based on item.status\r\n            # self.fields['action'].initial = ''\r\n\r\n\r\n    def clean(self):\r\n        cleaned_data = super().clean()\r\n        action = cleaned_data.get('action')\r\n        comment = cleaned_data.get('comment')\r\n\r\n        # Require comment only if action is REJECT\r\n        if action == 'REJECTED' and not comment:\r\n            self.add_error('comment', _('لطفاً دلیل رد کردن این ردیف را بنویسید.'))\r\n\r\n        return cleaned_data\r\n\r\n\r\nclass FactorApprovalForm(forms.ModelForm):\r\n    comment = forms.CharField(\r\n        widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),\r\n        required=False,\r\n        label=_(\"توضیحات کلی\")\r\n    )\r\n\r\n    class Meta:\r\n        model = Factor  # استفاده از کلاس مدل واقعی\r\n        fields = ['comment']\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        for item in self.instance.items.all():\r\n            self.fields[f'action_{item.id}'] = forms.ChoiceField(\r\n                choices=[\r\n                    ('', _('-------')),\r\n                    ('APPROVED', _('تأیید')),\r\n                    ('REJECTED', _('رد')),\r\n                ],\r\n                label=f\"وضعیت ردیف: {item.description}\",\r\n                widget=forms.Select(attrs={'class': 'form-control'}),\r\n                required=False\r\n            )\r\n            self.fields[f'comment_{item.id}'] = forms.CharField(\r\n                label=f\"توضیحات برای {item.description}\",\r\n                widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 2}),\r\n                required=False\r\n            )\r\n\r\n    def save(self, commit=True):\r\n        instance = super().save(commit=False)\r\n        if commit:\r\n            instance.save()\r\n            for item in self.instance.items.all():\r\n                action_field = f'action_{item.id}'\r\n                comment_field = f'comment_{item.id}'\r\n                if action_field in self.cleaned_data and self.cleaned_data[action_field]:\r\n                    item.status = self.cleaned_data[action_field]\r\n                    item.comment = self.cleaned_data[comment_field]\r\n                    item.save()\r\n        return instance\r\n\r\nclass TankhahForm(JalaliDateForm):\r\n    date = forms.CharField(\r\n        label=_('تاریخ'),\r\n        widget=forms.TextInput(attrs={\r\n            'data-jdp': '',\r\n            'class': 'form-control',\r\n            'placeholder': _('مثال: 1404/01/17'),\r\n        })\r\n    )\r\n    due_date = forms.CharField(\r\n        label=_('مهلت زمانی'),\r\n        required=False,\r\n        widget=forms.TextInput(attrs={\r\n            'data-jdp': '',\r\n            'class': 'form-control',\r\n            'placeholder': _('مثال: 1404/01/17'),\r\n        })\r\n    )\r\n\r\n    class Meta:\r\n        model = Tankhah\r\n        fields = ['date', 'organization', 'project', 'subproject', 'letter_number', 'due_date', 'amount', 'description']\r\n        widgets = {\r\n            'organization': forms.Select(attrs={'class': 'form-control'}),\r\n            'project': forms.Select(attrs={'class': 'form-control'}),\r\n            'subproject': forms.Select(attrs={'class': 'form-control'}),\r\n            'letter_number': forms.TextInput(attrs={'class': 'form-control', 'placeholder': _('اختیاری')}),\r\n            'amount': forms.NumberInput(attrs={'class': 'form-control', 'min': '0', 'step': '0.01'}),\r\n            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 4}),\r\n        }\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        from core.models import Organization, Project, SubProject\r\n        self.user = kwargs.pop('user', None)\r\n        super().__init__(*args, **kwargs)\r\n\r\n        if self.user:\r\n            user_orgs = set(up.post.organization for up in self.user.userpost_set.filter(is_active=True))\r\n            self.fields['organization'].queryset = Organization.objects.filter(id__in=[org.id for org in user_orgs])\r\n            self.fields['project'].queryset = Project.objects.filter(organizations__in=user_orgs).distinct()\r\n\r\n            if 'project' in self.data:\r\n                try:\r\n                    project_id = int(self.data.get('project'))\r\n                    self.fields['subproject'].queryset = SubProject.objects.filter(project_id=project_id)\r\n                except (ValueError, TypeError):\r\n                    self.fields['subproject'].queryset = SubProject.objects.none()\r\n            elif self.instance.pk and self.instance.project:\r\n                self.fields['subproject'].queryset = SubProject.objects.filter(project=self.instance.project)\r\n            else:\r\n                self.fields['subproject'].queryset = SubProject.objects.none()\r\n\r\n            if self.instance.pk and self.instance.organization:\r\n                user_posts = self.user.userpost_set.filter(is_active=True)\r\n                if not any(post.post.organization == self.instance.organization for post in user_posts):\r\n                    for field_name in self.fields:\r\n                        if field_name not in ['status', 'description']:\r\n                            self.fields[field_name].disabled = True\r\n\r\n        self.set_jalali_initial('date', 'date')\r\n        self.set_jalali_initial('due_date', 'due_date')\r\n\r\n    def clean(self):\r\n        cleaned_data = super().clean()\r\n        project = cleaned_data.get('project')\r\n        subproject = cleaned_data.get('subproject')\r\n        amount = cleaned_data.get('amount')\r\n\r\n        if subproject and subproject.project != project:\r\n            raise forms.ValidationError(_(\"زیرپروژه باید متعلق به پروژه انتخاب\u200Cشده باشد.\"))\r\n\r\n        if project and amount:\r\n            remaining_budget = get_subproject_remaining_budget(subproject) if subproject else get_project_remaining_budget(project)\r\n            if amount > remaining_budget:\r\n                raise forms.ValidationError(\r\n                    _(f\"مبلغ واردشده ({amount:,.0f} ریال) بیشتر از بودجه باقی\u200Cمانده ({remaining_budget:,.0f} ریال) است.\")\r\n                )\r\n\r\n        return cleaned_data\r\n\r\n    def clean_date(self):\r\n        return self.clean_jalali_date('date') or timezone.now()\r\n\r\n    def clean_due_date(self):\r\n        return self.clean_jalali_date('due_date')\r\n\r\n    def save(self, commit=True):\r\n        instance = super().save(commit=False)\r\n        if self.user:\r\n            user_post = self.user.userpost_set.filter(post__organization=instance.organization, is_active=True).first()\r\n            if not instance.pk:\r\n                instance.created_by = self.user\r\n                instance.last_stopped_post = user_post.post if user_post else None\r\n        if commit:\r\n            instance.save()\r\n        return instance\r\n\r\nclass TanbakhApprovalForm(forms.ModelForm):\r\n    comment = forms.CharField(\r\n        widget=forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),\r\n        required=False,\r\n        label=_(\"توضیحات\")\r\n    )\r\n\r\n    class Meta:\r\n        model = Tankhah\r\n        fields = []\r\n\r\nclass FactorForm(forms.ModelForm):\r\n    date = forms.CharField(\r\n        label=_('تاریخ'),\r\n        widget=forms.TextInput(attrs={\r\n            'data-jdp': '',\r\n            'class': 'form-control',\r\n            'placeholder': convert_to_farsi_numbers(_('تاریخ را انتخاب کنید (1404/01/17)'))\r\n        })\r\n    )\r\n\r\n    class Meta:\r\n        model = Factor\r\n        fields = ['tankhah', 'date', 'amount', 'description']\r\n        widgets = {\r\n            'amount': forms.NumberInput(attrs={'class': 'form-control'}),\r\n            'tankhah': forms.Select(attrs={'class': 'form-control'}),\r\n            'description': forms.Textarea(\r\n                attrs={'class': 'form-control', 'rows': 1, 'placeholder': _('توضیحات فاکتور')}),\r\n        }\r\n        labels = {\r\n            'tankhah': _('تنخواه'),\r\n            'date': _('تاریخ'),\r\n            'amount': _('مبلغ'),\r\n            'description': _('توضیحات'),\r\n        }\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        from core.models import WorkflowStage, Project, SubProject\r\n        self.user = kwargs.pop('user', None)\r\n        self.tankhah = kwargs.pop('tankhah', None)\r\n        super().__init__(*args, **kwargs)\r\n        initial_stage_order = WorkflowStage.objects.order_by('order').first().order if WorkflowStage.objects.exists() else None\r\n\r\n        if self.user:\r\n            user_orgs = restrict_to_user_organization(self.user)\r\n            if user_orgs is None:\r\n                self.fields['tankhah'].queryset = Tankhah.objects.filter(\r\n                    status__in=['DRAFT', 'PENDING'],\r\n                    current_stage__order=initial_stage_order\r\n                )\r\n            else:\r\n                projects = Project.objects.filter(organizations__in=user_orgs)\r\n                subprojects = SubProject.objects.filter(project__in=projects)\r\n                from django.db.models import Q\r\n                queryset = Tankhah.objects.filter(\r\n                    status__in=['DRAFT', 'PENDING'],\r\n                    current_stage__order=initial_stage_order\r\n                ).filter(\r\n                    Q(organization__in=user_orgs) |\r\n                    Q(project__in=projects) |\r\n                    Q(subproject__in=subprojects)\r\n                ).distinct()\r\n                self.fields['tankhah'].queryset = queryset\r\n                logger.info(f\"Tankhah queryset: {list(queryset.values('number', 'project__name', 'subproject__name'))}\")\r\n\r\n        if self.instance.pk:\r\n            self.fields['tankhah'].queryset = Tankhah.objects.filter(id=self.instance.tankhah.id)\r\n            self.fields['tankhah'].initial = self.instance.tankhah\r\n            if self.instance.date:\r\n                j_date = jdatetime.date.fromgregorian(date=self.instance.date)\r\n                jalali_date_str = j_date.strftime('%Y/%m/%d')\r\n                self.fields['date'].initial = jalali_date_str\r\n                self.initial['date'] = jalali_date_str\r\n\r\n            amount = self.instance.amount\r\n            if amount is not None:\r\n                self.initial['amount'] = str(int(round(Decimal(amount))))\r\n                logger.info(f'Initial amount set for widget: {self.initial[\"amount\"]}')\r\n\r\n        elif self.tankhah:\r\n            self.fields['tankhah'].initial = self.tankhah\r\n\r\n        if self.instance.pk and self.user and not self.user.has_perm('tankhah.Factor_full_edit'):\r\n            for field_name in self.fields:\r\n                self.fields[field_name].disabled = True\r\n\r\n    def clean_date(self):\r\n        date_str = self.cleaned_data.get('date')\r\n        if not date_str:\r\n            logger.error(\"خطا: تاریخ فاکتور وارد نشده است\")\r\n            raise forms.ValidationError(_('تاریخ فاکتور اجباری است.'))\r\n        try:\r\n            j_date = jdatetime.datetime.strptime(date_str, '%Y/%m/%d')\r\n            gregorian_date = j_date.togregorian()\r\n            logger.info(f\"تاریخ تبدیل\u200Cشده: {gregorian_date}\")\r\n            return timezone.make_aware(gregorian_date)\r\n        except ValueError:\r\n            # logger.error(f\"خطا در تبدیل تاریخ: {e}\")\r\n            raise forms.ValidationError(_('لطفاً تاریخ معتبری وارد کنید (مثل 1404/01/17).'))\r\n\r\n    def clean_amount(self):\r\n        amount = self.cleaned_data.get('amount')\r\n        if amount is None:\r\n            raise forms.ValidationError(_(\"وارد کردن مبلغ الزامی است.\"))\r\n        if amount <= 0:\r\n            raise forms.ValidationError(_(\"مبلغ باید بزرگتر از صفر باشد.\"))\r\n        return amount\r\n\r\n    def clean(self):\r\n        cleaned_data = super().clean()\r\n        logger.info(f\"داده\u200Cهای اعتبارسنجی\u200Cشده: {cleaned_data}\")\r\n        return cleaned_data\r\n\r\n    def save(self, commit=True):\r\n        logger.info(f\"Starting save for factor by {self.user}, commit={commit}, data={self.cleaned_data}\")\r\n        instance = super().save(commit=False)\r\n        if self.user:\r\n            if self.instance.pk and self.has_changed():\r\n                old_instance = Factor.objects.get(pk=self.instance.pk)\r\n                for field in self.changed_data:\r\n                    old_value = getattr(old_instance, field)\r\n                    new_value = getattr(instance, field)\r\n                    logger.info(\r\n                        f\"Change in factor (ID: {instance.pk}): {field} from {old_value} to {new_value} by {self.user}\")\r\n            else:\r\n                logger.info(f\"Creating new factor by {self.user}: {self.cleaned_data}\")\r\n        if commit:\r\n            instance.save()\r\n            logger.info(f\"Factor saved: ID={instance.pk}, number={instance.number}\")\r\n        return instance\r\n\r\nclass FactorItemForm(forms.ModelForm):\r\n    class Meta:\r\n        model = FactorItem\r\n        fields = ['description', 'amount', 'quantity']\r\n        widgets = {\r\n            'description': forms.TextInput(\r\n                attrs={'class': 'form-control form-control-sm', 'placeholder': _('شرح ردیف')}),\r\n            'amount': forms.NumberInput(\r\n                attrs={'class': 'form-control form-control-sm ltr-input amount-field', 'step': '1', 'min': '0', 'placeholder': 'مبلغ را وارد کنید'}),\r\n            'quantity': forms.NumberInput(\r\n                attrs={'class': 'form-control form-control-sm ltr-input quantity-field', 'placeholder': _('تعداد'), 'min': '1'}),\r\n        }\r\n\r\n    def clean(self):\r\n        cleaned_data = super().clean()\r\n        amount = cleaned_data.get('amount')\r\n        quantity = cleaned_data.get('quantity')\r\n        description = cleaned_data.get('description')\r\n\r\n        # اگه فرم خالیه (بدون توضیحات و مبلغ)، قبولش کن و نادیده بگیر\r\n        # نادیده گرفتن فرم\u200Cهای خالی\r\n        if not description and (amount is None or amount == 0) and (quantity is None or quantity == 1):\r\n            self.cleaned_data['DELETE'] = True\r\n            return cleaned_data\r\n\r\n        # اعتبارسنجی برای فرم\u200Cهای پرشده\r\n        if not description:\r\n            raise forms.ValidationError(_('شرح ردیف الزامی است.'))\r\n        if amount is None or amount <= 0:\r\n            raise forms.ValidationError(_('مبلغ باید بزرگ\u200Cتر از صفر باشد.'))\r\n        if quantity is None or quantity < 1:\r\n            raise forms.ValidationError(_('تعداد باید حداقل ۱ باشد.'))\r\n        return cleaned_data\r\n\r\nclass ApprovalForm(forms.ModelForm):\r\n    action = forms.ChoiceField(choices=[\r\n        ('APPROVE', 'تأیید'),\r\n        ('REJECT', 'رد'),\r\n        ('RETURN', 'بازگشت'),\r\n        ('CANCEL', 'لغو')\r\n    ])\r\n\r\n    class Meta:\r\n        from tankhah.models import ApprovalLog\r\n        model = ApprovalLog\r\n        fields = ['action', 'comment', 'tankhah', 'factor', 'factor_item']\r\n        widgets = {\r\n            'tankhah': forms.Select(attrs={'class': 'form-control'}),\r\n            'factor': forms.Select(attrs={'class': 'form-control'}),\r\n            'comment': forms.Textarea(attrs={'class': 'form-control', 'rows': 2, 'placeholder': _('توضیحات اختیاری')}),\r\n            'action': forms.Select(attrs={'class': 'form-control'}),\r\n            'factor_item': forms.HiddenInput(),\r\n        }\r\n        labels = {\r\n            'tankhah': _('تنخواه'),\r\n            'factor': _('فاکتور'),\r\n            'comment': _('توضیحات'),\r\n            'action': _('شاخه'),\r\n        }\r\n\r\nclass TankhahStatusForm(forms.ModelForm):\r\n    class Meta:\r\n        model = Tankhah\r\n        fields = ['status', 'current_stage', 'due_date', 'approved_by']\r\n        widgets = {\r\n            'status': forms.TextInput(attrs={'class': 'form-control', 'readonly': 'readonly'}),\r\n            'current_stage': forms.TextInput(attrs={'class': 'form-control', 'readonly': 'readonly'}),\r\n            'due_date': forms.DateInput(attrs={'class': 'form-control', 'readonly': 'readonly'}),\r\n            'approved_by': forms.SelectMultiple(attrs={'class': 'form-control', 'disabled': 'disabled'}),\r\n        }\r\n        labels = {\r\n            'status': _('وضعیت'),\r\n            'current_stage': _('مرحله فعلی'),\r\n            'due_date': _('مهلت زمانی'),\r\n            'approved_by': _('تأییدکنندگان'),\r\n        }\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        for field in self.fields.values():\r\n            field.disabled = True\r\n\r\nclass FactorStatusForm(forms.ModelForm):\r\n    class Meta:\r\n        model = Factor\r\n        fields = ['status']\r\n        widgets = {\r\n            'status': forms.TextInput(attrs={'class': 'form-control', 'readonly': 'readonly'}),\r\n        }\r\n        labels = {\r\n            'status': _('وضعیت'),\r\n        }\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.fields['status'].disabled = True\r\n\r\nclass MultipleFileInput(forms.ClearableFileInput):\r\n    allow_multiple_selected = True\r\n\r\nclass MultipleFileField(forms.FileField):\r\n    def __init__(self, *args, **kwargs):\r\n        kwargs.setdefault(\"widget\", MultipleFileInput(attrs={'multiple': True, 'class': 'form-control'}))\r\n        super().__init__(*args, **kwargs)\r\n\r\n    def clean(self, data, initial=None):\r\n        single_file_clean = super().clean\r\n        if isinstance(data, (list, tuple)):\r\n            result = [single_file_clean(d, initial) for d in data if d is not None]\r\n        else:\r\n            result = single_file_clean(data, initial)\r\n        return result\r\n\r\nALLOWED_EXTENSIONS = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png']\r\nALLOWED_EXTENSIONS_STR = \", \".join(ALLOWED_EXTENSIONS)\r\n\r\nclass FactorDocumentForm(forms.Form):\r\n    files = MultipleFileField(\r\n        label=_(\"بارگذاری اسناد فاکتور (فقط {} مجاز است)\".format(ALLOWED_EXTENSIONS_STR)),\r\n        required=False,\r\n        widget=MultipleFileInput(\r\n            attrs={\r\n                'multiple': True,\r\n                'class': 'form-control form-control-sm',\r\n                'accept': \",\".join(ALLOWED_EXTENSIONS)\r\n            }\r\n        )\r\n    )\r\n\r\n    def clean_files(self):\r\n        files = self.cleaned_data.get('files')\r\n        if files:\r\n            invalid_files = []\r\n            for uploaded_file in files:\r\n                if uploaded_file:\r\n                    ext = os.path.splitext(uploaded_file.name)[1].lower()\r\n                    if ext not in ALLOWED_EXTENSIONS:\r\n                        invalid_files.append(uploaded_file.name)\r\n                        logger.warning(f\"Invalid file type uploaded for FactorDocument: {uploaded_file.name} (type: {ext})\")\r\n\r\n            if invalid_files:\r\n                invalid_files_str = \", \".join(invalid_files)\r\n                error_msg = _(\"فایل(های) زیر دارای فرمت غیرمجاز هستند: {files}. فرمت\u200Cهای مجاز: {allowed}\").format(\r\n                    files=invalid_files_str,\r\n                    allowed=ALLOWED_EXTENSIONS_STR\r\n                )\r\n                raise ValidationError(error_msg)\r\n        return files\r\n\r\nclass TankhahDocumentForm(forms.Form):\r\n    documents = MultipleFileField(\r\n        label=_(\"بارگذاری مدارک تنخواه (فقط {} مجاز است)\".format(ALLOWED_EXTENSIONS_STR)),\r\n        required=False,\r\n        widget=MultipleFileInput(\r\n            attrs={\r\n                'multiple': True,\r\n                'class': 'form-control form-control-sm',\r\n                'accept': \",\".join(ALLOWED_EXTENSIONS)\r\n            }\r\n        )\r\n    )\r\n\r\n    def clean_documents(self):\r\n        files = self.cleaned_data.get('documents')\r\n        if files:\r\n            invalid_files = []\r\n            for uploaded_file in files:\r\n                if uploaded_file:\r\n                    ext = os.path.splitext(uploaded_file.name)[1].lower()\r\n                    if ext not in ALLOWED_EXTENSIONS:\r\n                        invalid_files.append(uploaded_file.name)\r\n                        logger.warning(f\"Invalid file type uploaded for TankhahDocument: {uploaded_file.name} (type: {ext})\")\r\n\r\n            if invalid_files:\r\n                invalid_files_str = \", \".join(invalid_files)\r\n                error_msg = _(\"فایل(های) زیر دارای فرمت غیرمجاز هستند: {files}. فرمت\u200Cهای مجاز: {allowed}\").format(\r\n                    files=invalid_files_str,\r\n                    allowed=ALLOWED_EXTENSIONS_STR\r\n                )\r\n                raise ValidationError(error_msg)\r\n        return files\r\n\r\n\r\ndef get_factor_item_formset():\r\n    from django.forms import inlineformset_factory\r\n    return inlineformset_factory(\r\n        Factor, FactorItem, form=FactorItemForm,\r\n        fields=['description', 'amount', 'quantity'],\r\n        # extra=1, can_delete=True, min_num=1, validate_min=True, max_num=100\r\n        extra=1, can_delete=True, min_num=1, validate_min=True, max_num=100\r\n    )
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tankhah/forms.py b/tankhah/forms.py
--- a/tankhah/forms.py	(revision 0a0ca06ec4ce9f71ce8a4bcd74fe0fd5202393c1)
+++ b/tankhah/forms.py	(date 1746184918900)
@@ -14,47 +14,53 @@
 
 logger = logging.getLogger(__name__)
 
-class FactorItemApprovalForm(forms.Form):
-    item_id = forms.IntegerField(widget=forms.HiddenInput)
+class FactorItemApprovalForm(forms.ModelForm): # <--- ارث‌بری از ModelForm
+    """Form for approving/rejecting a single FactorItem."""
+
+    # تعریف فیلد action به صورت جداگانه
+    ACTION_CHOICES = [
+        #('', _('---')), # گزینه "بدون تغییر" را می‌توانیم با منطق ویو مدیریت کنیم
+        ('PENDING', _('بازنشانی به در انتظار')),
+        ('APPROVED', _('تأیید')),
+        ('REJECTED', _('رد')),
+    ]
     action = forms.ChoiceField(
-        choices=[
-            ('PENDING', _('در انتظار')),
-            ('APPROVE', _('تأیید')),
-            ('REJECT', _('رد')),
-        ],
-        widget=forms.Select(attrs={'class': 'form-control form-select', 'style': 'max-width: 200px;'}),
-        label=_("اقدام"),
-        required=False,
-        initial='PENDING'
+        choices=ACTION_CHOICES,
+        required=False, # در ابتدا نیازی نیست، مقدار اولیه از وضعیت فعلی گرفته می‌شود
+        label=_("اقدام شما"),
+        # از ویجت مخفی استفاده می‌کنیم چون کنترل با دراپ‌داون JS انجام می‌شود
+        widget=forms.HiddenInput(attrs={'class': 'action-hidden-input'})
     )
+
     comment = forms.CharField(
-        widget=forms.Textarea(attrs={
-            'class': 'form-control',
-            'rows': 2,
-            'placeholder': _('توضیحات خود را اینجا وارد کنید...'),
-            'style': 'max-width: 500px;'
-        }),
-        required=False,
-        label=_("توضیحات")
+        label=_('توضیحات شما'),
+        widget=forms.Textarea(attrs={'rows': 1, 'class': 'form-control form-control-sm comment-field', 'placeholder': _('دلیل رد (در صورت رد کردن)')}),
+        required=False # فقط در صورت رد کردن الزامی می‌شود (در clean)
     )
+
     class Meta:
         model = FactorItem
-        # Fields to include in the form (that the user interacts with OR needed for processing)
-        # We don't include 'status' directly if we use 'action' field
-        fields = ['action', 'comment']
+        # فقط فیلدهایی که می‌خواهیم مستقیماً از مدل ویرایش شوند
+        # یا فیلدهایی که برای نمایش/اعتبارسنجی لازم داریم
+        # ما وضعیت (status) را مستقیماً ویرایش نمی‌کنیم، بلکه از فیلد action استفاده می‌کنیم
+        fields = ['comment'] # فقط کامنت مستقیماً از کاربر گرفته می‌شود
+        # فیلد action را جداگانه تعریف کردیم
 
     def __init__(self, *args, **kwargs):
         super().__init__(*args, **kwargs)
-        # Set initial value for 'action' based on the instance's current status
+        # مقدار اولیه action را بر اساس وضعیت فعلی آیتم تنظیم کن
         if self.instance and self.instance.pk:
-             # Map DB status to form action choices
-             # Adjust this mapping if your ACTION_CHOICES differ from STATUS_CHOICES
             current_status_upper = str(self.instance.status).upper()
-            # Find the matching choice value
-            matching_choice = current_status_upper if current_status_upper in dict(self.ACTION_CHOICES) else 'PENDING' # Default to PENDING if no match
-            self.fields['action'].initial = matching_choice
-            # Alternatively, keep initial blank and let JS set dropdown text based on item.status
-            # self.fields['action'].initial = ''
+            # مطمئن شو که وضعیت فعلی در بین گزینه‌های action وجود دارد
+            if current_status_upper in dict(self.ACTION_CHOICES):
+                self.fields['action'].initial = current_status_upper
+            else:
+                # اگر وضعیت فعلی در گزینه‌ها نبود (مثلا PAID)، مقدار اولیه را PENDING بگذار
+                self.fields['action'].initial = 'PENDING'
+                logger.warning(f"Status '{self.instance.status}' for item {self.instance.pk} not in ACTION_CHOICES, defaulting action to PENDING.")
+        else:
+            # برای فرم‌های جدید (که اینجا نداریم ولی برای اطمینان)
+             self.fields['action'].initial = 'PENDING'
 
 
     def clean(self):
@@ -62,13 +68,18 @@
         action = cleaned_data.get('action')
         comment = cleaned_data.get('comment')
 
-        # Require comment only if action is REJECT
-        if action == 'REJECTED' and not comment:
+        # اگر کاربر اقدامی انتخاب نکرده (None یا خالی)، آن را نادیده بگیر یا PENDING در نظر بگیر
+        if not action or action == 'NONE': # NONE را هم در نظر بگیر اگر در JS استفاده شده
+             # نیازی به خطا نیست، فقط کامنت را هم غیرالزامی کن
+             pass # یا cleaned_data['action'] = self.instance.status if می خواهید بدون تغییر باشد
+        elif action == 'REJECTED' and not comment:
+            # اگر رد شده ولی کامنت خالی است، خطا بده
             self.add_error('comment', _('لطفاً دلیل رد کردن این ردیف را بنویسید.'))
 
         return cleaned_data
 
 
+
 class FactorApprovalForm(forms.ModelForm):
     comment = forms.CharField(
         widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
Index: logs/MyLog.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/logs/MyLog.log b/logs/MyLog.log
--- a/logs/MyLog.log	(revision 0a0ca06ec4ce9f71ce8a4bcd74fe0fd5202393c1)
+++ b/logs/MyLog.log	(date 1746185091717)
@@ -16828,3 +16828,40 @@
 INFO 2025-05-02 14:47:03,659 middleware __call__ درخواست به: /favicon.ico, کاربر: jj
 INFO 2025-05-02 14:47:03,665 middleware __call__ پاسخ برای /favicon.ico - کد وضعیت: 302
 INFO 2025-05-02 14:47:03,669 basehttp log_message "GET /favicon.ico HTTP/1.1" 302 0
+INFO 2025-05-02 14:50:42,270 autoreload trigger_reload D:\Design & Source Code\Source Coding\Tanbakhsystem\tankhah\forms.py changed, reloading.
+INFO 2025-05-02 14:50:44,403 autoreload run_with_reloader Watching for file changes with StatReloader
+INFO 2025-05-02 14:50:45,165 view_Factor <module> [ویزارد] مسیر ذخیره‌سازی فایل ایجاد شد: D:\Design & Source Code\Source Coding\Tanbakhsystem\media\temp_wizard_files
+INFO 2025-05-02 14:51:59,363 autoreload trigger_reload D:\Design & Source Code\Source Coding\Tanbakhsystem\tankhah\forms.py changed, reloading.
+INFO 2025-05-02 14:52:01,557 autoreload run_with_reloader Watching for file changes with StatReloader
+INFO 2025-05-02 14:52:02,091 view_Factor <module> [ویزارد] مسیر ذخیره‌سازی فایل ایجاد شد: D:\Design & Source Code\Source Coding\Tanbakhsystem\media\temp_wizard_files
+INFO 2025-05-02 14:52:09,449 models remove_inactive_users هیچ کاربر غیرفعالی برای حذف یافت نشد.
+INFO 2025-05-02 14:52:09,452 middleware __call__ درخواست به: /tankhah/factor-item/16/approve/, کاربر: jj
+INFO 2025-05-02 14:52:09,497 PermissionBase dispatch شروع dispatch در FactorItemApproveView برای کاربر: jj
+INFO 2025-05-02 14:52:09,508 PermissionBase _has_organization_access سازمان‌های کاربر: {<Organization: HQ_ITDC - دفتر مرکزی شرکت توسعه گردشگری ایران (دفتر مرکزی)>}
+INFO 2025-05-02 14:52:09,508 PermissionBase _has_organization_access کاربر HQ است، دسترسی کامل
+INFO 2025-05-02 14:52:09,516 view_FactorItemApprove get_context_data [ApproveView-Context] شروع get_context_data برای فاکتور 16
+DEBUG 2025-05-02 14:52:09,520 view_FactorItemApprove get_context_data [ApproveView-Context] فرم‌ست ایجاد شد. تعداد فرم‌ها: 0
+INFO 2025-05-02 14:52:09,531 fun_can_edit_approval can_edit_approval can_edit_approval: user_level=2, max_change_level=2, stage_order=1, higher_approval=None, higher_approval_seen=False
+INFO 2025-05-02 14:52:09,538 view_FactorItemApprove get_context_data [ApproveView-Context] وضعیت‌های آیتم فعلی: []
+INFO 2025-05-02 14:52:09,538 view_FactorItemApprove get_context_data [ApproveView-Context] پایان get_context_data
+DEBUG 2025-05-02 14:52:09,611 rcms_custom_filters format_negative Manually formatted number: 0
+INFO 2025-05-02 14:52:09,614 middleware __call__ پاسخ برای /tankhah/factor-item/16/approve/ - کد وضعیت: 200
+INFO 2025-05-02 14:52:09,620 basehttp log_message "GET /tankhah/factor-item/16/approve/ HTTP/1.1" 200 30460
+INFO 2025-05-02 14:53:06,189 models remove_inactive_users هیچ کاربر غیرفعالی برای حذف یافت نشد.
+INFO 2025-05-02 14:53:06,193 middleware __call__ درخواست به: /tankhah/factor-item/16/approve/, کاربر: jj
+INFO 2025-05-02 14:53:06,211 PermissionBase dispatch شروع dispatch در FactorItemApproveView برای کاربر: jj
+INFO 2025-05-02 14:53:06,234 PermissionBase _has_organization_access سازمان‌های کاربر: {<Organization: HQ_ITDC - دفتر مرکزی شرکت توسعه گردشگری ایران (دفتر مرکزی)>}
+INFO 2025-05-02 14:53:06,235 PermissionBase _has_organization_access کاربر HQ است، دسترسی کامل
+INFO 2025-05-02 14:53:06,251 view_FactorItemApprove get_context_data [ApproveView-Context] شروع get_context_data برای فاکتور 16
+DEBUG 2025-05-02 14:53:06,258 view_FactorItemApprove get_context_data [ApproveView-Context] فرم‌ست ایجاد شد. تعداد فرم‌ها: 0
+INFO 2025-05-02 14:53:06,286 fun_can_edit_approval can_edit_approval can_edit_approval: user_level=2, max_change_level=2, stage_order=1, higher_approval=None, higher_approval_seen=False
+INFO 2025-05-02 14:53:06,305 view_FactorItemApprove get_context_data [ApproveView-Context] وضعیت‌های آیتم فعلی: []
+INFO 2025-05-02 14:53:06,306 view_FactorItemApprove get_context_data [ApproveView-Context] پایان get_context_data
+DEBUG 2025-05-02 14:53:06,373 rcms_custom_filters format_negative Manually formatted number: 0
+INFO 2025-05-02 14:53:06,380 middleware __call__ پاسخ برای /tankhah/factor-item/16/approve/ - کد وضعیت: 200
+INFO 2025-05-02 14:53:06,393 basehttp log_message "GET /tankhah/factor-item/16/approve/ HTTP/1.1" 200 30460
+INFO 2025-05-02 14:54:40,852 models remove_inactive_users هیچ کاربر غیرفعالی برای حذف یافت نشد.
+INFO 2025-05-02 14:54:40,855 middleware __call__ درخواست به: /, کاربر: jj
+INFO 2025-05-02 14:54:40,864 PermissionBase dispatch شروع dispatch در DashboardView برای کاربر: jj
+INFO 2025-05-02 14:54:51,710 middleware __call__ پاسخ برای / - کد وضعیت: 200
+INFO 2025-05-02 14:54:51,717 basehttp log_message "GET / HTTP/1.1" 200 62622
